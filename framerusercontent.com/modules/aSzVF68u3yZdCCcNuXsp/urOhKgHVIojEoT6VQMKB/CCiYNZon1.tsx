// Generated by Framer (97d1eee)

import { addFonts, addPropertyControls, ComponentViewportProvider, ControlType, cx, CycleVariantState, getFonts, Link, useActiveVariantCallback, useComponentViewport, useLocaleInfo, useVariantState, withCSS } from "framer";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";
import ButtonFlipText from "./z6NWtS2K1";
const ButtonFlipTextFonts = getFonts(ButtonFlipText);

const enabledGestures = {kNXxT2Epc: {hover: true}};

const cycleOrder = ["kNXxT2Epc", "LTGfT06av"];

const serializationHash = "framer-AXFDJ"

const variantClassNames = {kNXxT2Epc: "framer-v-upv04b", LTGfT06av: "framer-v-120ivkn"};

function addPropertyOverrides(overrides, ...variants) {
const nextOverrides = {}
variants?.forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]))
return nextOverrides
}

const transition1 = {damping: 60, delay: 0, mass: 1, stiffness: 500, type: "spring"}

const Transition = ({value, children}) => {
const config = React.useContext(MotionConfigContext)
const transition = value ?? config.transition
const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)])
return <MotionConfigContext.Provider value={contextValue}>{children}</MotionConfigContext.Provider>
}

const Variants = motion(React.Fragment)

const humanReadableVariantMap = {Active: "LTGfT06av", Default: "kNXxT2Epc"}

const getProps = ({click, click2, height, id, link, menuText, smoothScroll, width, ...props}) => { return {...props, ewKsohNeS: click ?? props.ewKsohNeS, hoaTfbT2C: click2 ?? props.hoaTfbT2C, mkym07KjD: menuText ?? props.mkym07KjD ?? "Menu", poFVlVREQ: smoothScroll ?? props.poFVlVREQ, tz6RYi5cs: link ?? props.tz6RYi5cs, variant: humanReadableVariantMap[props.variant] ?? props.variant ?? "kNXxT2Epc"} }

const createLayoutDependency = (props, variants) => {if (props.layoutDependency) return variants.join('-') + props.layoutDependency
return variants.join('-')}

export interface Props extends React.HTMLAttributes<HTMLDivElement> { style?: Record<string, unknown>;className?: string;layoutId?: string | number;variant?: keyof typeof humanReadableVariantMap;menuText?: string;link?: string;smoothScroll?: boolean;click?: any;click2?: any; }

const Component = React.forwardRef<HTMLDivElement, Props>(function(props, ref) {

const { activeLocale, setLocale } = useLocaleInfo()

const {style, className, layoutId, variant, mkym07KjD, tz6RYi5cs, poFVlVREQ, ewKsohNeS, hoaTfbT2C, ...restProps} = getProps(props)

const {baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants} = useVariantState({cycleOrder, defaultVariant: "kNXxT2Epc", enabledGestures, variant, variantClassNames})

const layoutDependency = createLayoutDependency(props, variants)

const { activeVariantCallback, delay } = useActiveVariantCallback(baseVariant)

const onTap15zbo7o = activeVariantCallback(async (...args) => {
setGestureState({isPressed: false})
if (ewKsohNeS) {const res = await ewKsohNeS(...args);
if (res === false) return false;}
if (hoaTfbT2C) {const res = await hoaTfbT2C(...args);
if (res === false) return false;}
})

const ref1 = React.useRef<HTMLElement>(null)

const defaultLayoutId = React.useId()

const sharedStyleClassNames = []

const componentViewport = useComponentViewport()

return (<LayoutGroup id={layoutId ?? defaultLayoutId}>
<Variants animate={variants} initial={false}><Transition value={transition1}><Link href={tz6RYi5cs} smoothScroll={poFVlVREQ}><motion.a {...restProps} {...gestureHandlers} className={`${cx(serializationHash, ...sharedStyleClassNames, "framer-upv04b", className, classNames)} framer-1n7zh0j`} data-framer-name={"Default"} data-highlight layoutDependency={layoutDependency} layoutId={"kNXxT2Epc"} onTap={onTap15zbo7o} ref={ref ?? ref1} style={{backgroundColor: "rgba(0, 0, 0, 0)", borderBottomLeftRadius: 50, borderBottomRightRadius: 50, borderTopLeftRadius: 50, borderTopRightRadius: 50, ...style}} variants={{"kNXxT2Epc-hover": {backgroundColor: "var(--token-631b4057-07c3-4ea7-9517-eb324f4dea67, rgb(0, 102, 255))"}, LTGfT06av: {backgroundColor: "var(--token-d53a0d5d-f66a-4427-b6ca-4d0b644d940e, rgb(0, 153, 255))"}}} {...addPropertyOverrides({"kNXxT2Epc-hover": {"data-framer-name": undefined}, LTGfT06av: {"data-framer-name": "Active"}}, baseVariant, gestureVariant)}><ComponentViewportProvider ><motion.div className={"framer-chm8m0-container"} layoutDependency={layoutDependency} layoutId={"EEH5N0wLL-container"}><ButtonFlipText height={"100%"} id={"EEH5N0wLL"} layoutId={"EEH5N0wLL"} NzbwAfCQt={mkym07KjD} variant={"CCFRQF3qL"} width={"100%"} {...addPropertyOverrides({"kNXxT2Epc-hover": {variant: "HfGrAkDWH"}, LTGfT06av: {variant: "HfGrAkDWH"}}, baseVariant, gestureVariant)}/></motion.div></ComponentViewportProvider></motion.a></Link></Transition></Variants>
</LayoutGroup>)

});

const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-AXFDJ.framer-1n7zh0j, .framer-AXFDJ .framer-1n7zh0j { display: block; }", ".framer-AXFDJ.framer-upv04b { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 8px 14px 8px 14px; position: relative; text-decoration: none; width: min-content; will-change: var(--framer-will-change-override, transform); }", ".framer-AXFDJ .framer-chm8m0-container { flex: none; height: auto; position: relative; width: auto; }", "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-AXFDJ.framer-upv04b { gap: 0px; } .framer-AXFDJ.framer-upv04b > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-AXFDJ.framer-upv04b > :first-child { margin-left: 0px; } .framer-AXFDJ.framer-upv04b > :last-child { margin-right: 0px; } }"]

/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 30
 * @framerIntrinsicWidth 60
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["auto","auto"]},"LTGfT06av":{"layout":["auto","auto"]},"B8UaTmF72":{"layout":["auto","auto"]}}}
 * @framerVariables {"mkym07KjD":"menuText","tz6RYi5cs":"link","poFVlVREQ":"smoothScroll","ewKsohNeS":"click","hoaTfbT2C":"click2"}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerComponentViewportWidth true
 */
const FramerCCiYNZon1: React.ComponentType<Props> = withCSS(Component, css, "framer-AXFDJ") as typeof Component;
export default FramerCCiYNZon1;

FramerCCiYNZon1.displayName = "Button/Menu";

FramerCCiYNZon1.defaultProps = {height: 30, width: 60};

addPropertyControls(FramerCCiYNZon1, {variant: {options: ["kNXxT2Epc", "LTGfT06av"], optionTitles: ["Default", "Active"], title: "Variant", type: ControlType.Enum}, mkym07KjD: {defaultValue: "Menu", displayTextArea: false, title: "Menu Text", type: ControlType.String}, tz6RYi5cs: {title: "Link", type: ControlType.Link}, poFVlVREQ: {defaultValue: false, title: "Smooth Scroll", type: ControlType.Boolean}, ewKsohNeS: {title: "Click", type: ControlType.EventHandler}, hoaTfbT2C: {title: "Click 2", type: ControlType.EventHandler}} as any)

addFonts(FramerCCiYNZon1, [{explicitInter: true, fonts: []}, ...ButtonFlipTextFonts], {supportsExplicitInterCodegen: true})